# CMAKE generated file: DO NOT EDIT!
# Generated by "Unix Makefiles" Generator, CMake Version 3.17

# Default target executed when no arguments are given to make.
default_target: all

.PHONY : default_target

# Allow only one "make -f Makefile2" at a time, but pass parallelism.
.NOTPARALLEL:


#=============================================================================
# Special targets provided by cmake.

# Disable implicit rules so canonical targets will work.
.SUFFIXES:


# Disable VCS-based implicit rules.
% : %,v


# Disable VCS-based implicit rules.
% : RCS/%


# Disable VCS-based implicit rules.
% : RCS/%,v


# Disable VCS-based implicit rules.
% : SCCS/s.%


# Disable VCS-based implicit rules.
% : s.%


.SUFFIXES: .hpux_make_needs_suffix_list


# Command-line flag to silence nested $(MAKE).
$(VERBOSE)MAKESILENT = -s

# Suppress display of executed commands.
$(VERBOSE).SILENT:


# A target that is always out of date.
cmake_force:

.PHONY : cmake_force

#=============================================================================
# Set environment variables for the build.

# The shell in which to execute make rules.
SHELL = /bin/sh

# The CMake executable.
CMAKE_COMMAND = /cygdrive/c/Users/Yuval/AppData/Local/JetBrains/CLion2020.3/cygwin_cmake/bin/cmake.exe

# The command to remove a file.
RM = /cygdrive/c/Users/Yuval/AppData/Local/JetBrains/CLion2020.3/cygwin_cmake/bin/cmake.exe -E rm -f

# Escaping for special characters.
EQUALS = =

# The top-level source directory on which CMake was run.
CMAKE_SOURCE_DIR = /cygdrive/c/Users/Yuval/CLionProjects/lesson5

# The top-level build directory on which CMake was run.
CMAKE_BINARY_DIR = /cygdrive/c/Users/Yuval/CLionProjects/lesson5/cmake-build-debug

#=============================================================================
# Targets provided globally by CMake.

# Special rule for the target edit_cache
edit_cache:
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "No interactive CMake dialog available..."
	/cygdrive/c/Users/Yuval/AppData/Local/JetBrains/CLion2020.3/cygwin_cmake/bin/cmake.exe -E echo No\ interactive\ CMake\ dialog\ available.
.PHONY : edit_cache

# Special rule for the target edit_cache
edit_cache/fast: edit_cache

.PHONY : edit_cache/fast

# Special rule for the target rebuild_cache
rebuild_cache:
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake to regenerate build system..."
	/cygdrive/c/Users/Yuval/AppData/Local/JetBrains/CLion2020.3/cygwin_cmake/bin/cmake.exe --regenerate-during-build -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
.PHONY : rebuild_cache

# Special rule for the target rebuild_cache
rebuild_cache/fast: rebuild_cache

.PHONY : rebuild_cache/fast

# The main all target
all: cmake_check_build_system
	$(CMAKE_COMMAND) -E cmake_progress_start /cygdrive/c/Users/Yuval/CLionProjects/lesson5/cmake-build-debug/CMakeFiles /cygdrive/c/Users/Yuval/CLionProjects/lesson5/cmake-build-debug/CMakeFiles/progress.marks
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 all
	$(CMAKE_COMMAND) -E cmake_progress_start /cygdrive/c/Users/Yuval/CLionProjects/lesson5/cmake-build-debug/CMakeFiles 0
.PHONY : all

# The main clean target
clean:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 clean
.PHONY : clean

# The main clean target
clean/fast: clean

.PHONY : clean/fast

# Prepare targets for installation.
preinstall: all
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 preinstall
.PHONY : preinstall

# Prepare targets for installation.
preinstall/fast:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 preinstall
.PHONY : preinstall/fast

# clear depends
depend:
	$(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 1
.PHONY : depend

#=============================================================================
# Target rules for targets named belman_ford

# Build rule for target.
belman_ford: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 belman_ford
.PHONY : belman_ford

# fast build rule for target.
belman_ford/fast:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/belman_ford.dir/build.make CMakeFiles/belman_ford.dir/build
.PHONY : belman_ford/fast

#=============================================================================
# Target rules for targets named dijkstra

# Build rule for target.
dijkstra: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 dijkstra
.PHONY : dijkstra

# fast build rule for target.
dijkstra/fast:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/dijkstra.dir/build.make CMakeFiles/dijkstra.dir/build
.PHONY : dijkstra/fast

#=============================================================================
# Target rules for targets named all_pairs_shortest_path

# Build rule for target.
all_pairs_shortest_path: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 all_pairs_shortest_path
.PHONY : all_pairs_shortest_path

# fast build rule for target.
all_pairs_shortest_path/fast:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/all_pairs_shortest_path.dir/build.make CMakeFiles/all_pairs_shortest_path.dir/build
.PHONY : all_pairs_shortest_path/fast

#=============================================================================
# Target rules for targets named kruskal

# Build rule for target.
kruskal: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 kruskal
.PHONY : kruskal

# fast build rule for target.
kruskal/fast:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/kruskal.dir/build.make CMakeFiles/kruskal.dir/build
.PHONY : kruskal/fast

#=============================================================================
# Target rules for targets named union_find

# Build rule for target.
union_find: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 union_find
.PHONY : union_find

# fast build rule for target.
union_find/fast:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/union_find.dir/build.make CMakeFiles/union_find.dir/build
.PHONY : union_find/fast

#=============================================================================
# Target rules for targets named is_bipartite_graph

# Build rule for target.
is_bipartite_graph: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 is_bipartite_graph
.PHONY : is_bipartite_graph

# fast build rule for target.
is_bipartite_graph/fast:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/is_bipartite_graph.dir/build.make CMakeFiles/is_bipartite_graph.dir/build
.PHONY : is_bipartite_graph/fast

#=============================================================================
# Target rules for targets named min_cost_max_flow

# Build rule for target.
min_cost_max_flow: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 min_cost_max_flow
.PHONY : min_cost_max_flow

# fast build rule for target.
min_cost_max_flow/fast:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/min_cost_max_flow.dir/build.make CMakeFiles/min_cost_max_flow.dir/build
.PHONY : min_cost_max_flow/fast

#=============================================================================
# Target rules for targets named strongly_connected_components

# Build rule for target.
strongly_connected_components: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 strongly_connected_components
.PHONY : strongly_connected_components

# fast build rule for target.
strongly_connected_components/fast:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/strongly_connected_components.dir/build.make CMakeFiles/strongly_connected_components.dir/build
.PHONY : strongly_connected_components/fast

#=============================================================================
# Target rules for targets named maximum_bipartite_matching

# Build rule for target.
maximum_bipartite_matching: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 maximum_bipartite_matching
.PHONY : maximum_bipartite_matching

# fast build rule for target.
maximum_bipartite_matching/fast:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/maximum_bipartite_matching.dir/build.make CMakeFiles/maximum_bipartite_matching.dir/build
.PHONY : maximum_bipartite_matching/fast

#=============================================================================
# Target rules for targets named max_flow

# Build rule for target.
max_flow: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 max_flow
.PHONY : max_flow

# fast build rule for target.
max_flow/fast:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/max_flow.dir/build.make CMakeFiles/max_flow.dir/build
.PHONY : max_flow/fast

#=============================================================================
# Target rules for targets named min_cost_bipartite_perfect_matching

# Build rule for target.
min_cost_bipartite_perfect_matching: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 min_cost_bipartite_perfect_matching
.PHONY : min_cost_bipartite_perfect_matching

# fast build rule for target.
min_cost_bipartite_perfect_matching/fast:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/min_cost_bipartite_perfect_matching.dir/build.make CMakeFiles/min_cost_bipartite_perfect_matching.dir/build
.PHONY : min_cost_bipartite_perfect_matching/fast

all_pairs_shortest_path.o: all_pairs_shortest_path.cpp.o

.PHONY : all_pairs_shortest_path.o

# target to build an object file
all_pairs_shortest_path.cpp.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/all_pairs_shortest_path.dir/build.make CMakeFiles/all_pairs_shortest_path.dir/all_pairs_shortest_path.cpp.o
.PHONY : all_pairs_shortest_path.cpp.o

all_pairs_shortest_path.i: all_pairs_shortest_path.cpp.i

.PHONY : all_pairs_shortest_path.i

# target to preprocess a source file
all_pairs_shortest_path.cpp.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/all_pairs_shortest_path.dir/build.make CMakeFiles/all_pairs_shortest_path.dir/all_pairs_shortest_path.cpp.i
.PHONY : all_pairs_shortest_path.cpp.i

all_pairs_shortest_path.s: all_pairs_shortest_path.cpp.s

.PHONY : all_pairs_shortest_path.s

# target to generate assembly for a file
all_pairs_shortest_path.cpp.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/all_pairs_shortest_path.dir/build.make CMakeFiles/all_pairs_shortest_path.dir/all_pairs_shortest_path.cpp.s
.PHONY : all_pairs_shortest_path.cpp.s

belman_ford.o: belman_ford.cpp.o

.PHONY : belman_ford.o

# target to build an object file
belman_ford.cpp.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/belman_ford.dir/build.make CMakeFiles/belman_ford.dir/belman_ford.cpp.o
.PHONY : belman_ford.cpp.o

belman_ford.i: belman_ford.cpp.i

.PHONY : belman_ford.i

# target to preprocess a source file
belman_ford.cpp.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/belman_ford.dir/build.make CMakeFiles/belman_ford.dir/belman_ford.cpp.i
.PHONY : belman_ford.cpp.i

belman_ford.s: belman_ford.cpp.s

.PHONY : belman_ford.s

# target to generate assembly for a file
belman_ford.cpp.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/belman_ford.dir/build.make CMakeFiles/belman_ford.dir/belman_ford.cpp.s
.PHONY : belman_ford.cpp.s

dijkstra.o: dijkstra.cpp.o

.PHONY : dijkstra.o

# target to build an object file
dijkstra.cpp.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/dijkstra.dir/build.make CMakeFiles/dijkstra.dir/dijkstra.cpp.o
.PHONY : dijkstra.cpp.o

dijkstra.i: dijkstra.cpp.i

.PHONY : dijkstra.i

# target to preprocess a source file
dijkstra.cpp.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/dijkstra.dir/build.make CMakeFiles/dijkstra.dir/dijkstra.cpp.i
.PHONY : dijkstra.cpp.i

dijkstra.s: dijkstra.cpp.s

.PHONY : dijkstra.s

# target to generate assembly for a file
dijkstra.cpp.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/dijkstra.dir/build.make CMakeFiles/dijkstra.dir/dijkstra.cpp.s
.PHONY : dijkstra.cpp.s

is_bipartite_graph.o: is_bipartite_graph.cpp.o

.PHONY : is_bipartite_graph.o

# target to build an object file
is_bipartite_graph.cpp.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/is_bipartite_graph.dir/build.make CMakeFiles/is_bipartite_graph.dir/is_bipartite_graph.cpp.o
.PHONY : is_bipartite_graph.cpp.o

is_bipartite_graph.i: is_bipartite_graph.cpp.i

.PHONY : is_bipartite_graph.i

# target to preprocess a source file
is_bipartite_graph.cpp.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/is_bipartite_graph.dir/build.make CMakeFiles/is_bipartite_graph.dir/is_bipartite_graph.cpp.i
.PHONY : is_bipartite_graph.cpp.i

is_bipartite_graph.s: is_bipartite_graph.cpp.s

.PHONY : is_bipartite_graph.s

# target to generate assembly for a file
is_bipartite_graph.cpp.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/is_bipartite_graph.dir/build.make CMakeFiles/is_bipartite_graph.dir/is_bipartite_graph.cpp.s
.PHONY : is_bipartite_graph.cpp.s

kruskal.o: kruskal.cpp.o

.PHONY : kruskal.o

# target to build an object file
kruskal.cpp.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/kruskal.dir/build.make CMakeFiles/kruskal.dir/kruskal.cpp.o
.PHONY : kruskal.cpp.o

kruskal.i: kruskal.cpp.i

.PHONY : kruskal.i

# target to preprocess a source file
kruskal.cpp.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/kruskal.dir/build.make CMakeFiles/kruskal.dir/kruskal.cpp.i
.PHONY : kruskal.cpp.i

kruskal.s: kruskal.cpp.s

.PHONY : kruskal.s

# target to generate assembly for a file
kruskal.cpp.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/kruskal.dir/build.make CMakeFiles/kruskal.dir/kruskal.cpp.s
.PHONY : kruskal.cpp.s

max_flow.o: max_flow.cpp.o

.PHONY : max_flow.o

# target to build an object file
max_flow.cpp.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/max_flow.dir/build.make CMakeFiles/max_flow.dir/max_flow.cpp.o
.PHONY : max_flow.cpp.o

max_flow.i: max_flow.cpp.i

.PHONY : max_flow.i

# target to preprocess a source file
max_flow.cpp.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/max_flow.dir/build.make CMakeFiles/max_flow.dir/max_flow.cpp.i
.PHONY : max_flow.cpp.i

max_flow.s: max_flow.cpp.s

.PHONY : max_flow.s

# target to generate assembly for a file
max_flow.cpp.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/max_flow.dir/build.make CMakeFiles/max_flow.dir/max_flow.cpp.s
.PHONY : max_flow.cpp.s

maximum_bipartite_matching.o: maximum_bipartite_matching.cpp.o

.PHONY : maximum_bipartite_matching.o

# target to build an object file
maximum_bipartite_matching.cpp.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/maximum_bipartite_matching.dir/build.make CMakeFiles/maximum_bipartite_matching.dir/maximum_bipartite_matching.cpp.o
	$(MAKE) $(MAKESILENT) -f CMakeFiles/min_cost_bipartite_perfect_matching.dir/build.make CMakeFiles/min_cost_bipartite_perfect_matching.dir/maximum_bipartite_matching.cpp.o
.PHONY : maximum_bipartite_matching.cpp.o

maximum_bipartite_matching.i: maximum_bipartite_matching.cpp.i

.PHONY : maximum_bipartite_matching.i

# target to preprocess a source file
maximum_bipartite_matching.cpp.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/maximum_bipartite_matching.dir/build.make CMakeFiles/maximum_bipartite_matching.dir/maximum_bipartite_matching.cpp.i
	$(MAKE) $(MAKESILENT) -f CMakeFiles/min_cost_bipartite_perfect_matching.dir/build.make CMakeFiles/min_cost_bipartite_perfect_matching.dir/maximum_bipartite_matching.cpp.i
.PHONY : maximum_bipartite_matching.cpp.i

maximum_bipartite_matching.s: maximum_bipartite_matching.cpp.s

.PHONY : maximum_bipartite_matching.s

# target to generate assembly for a file
maximum_bipartite_matching.cpp.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/maximum_bipartite_matching.dir/build.make CMakeFiles/maximum_bipartite_matching.dir/maximum_bipartite_matching.cpp.s
	$(MAKE) $(MAKESILENT) -f CMakeFiles/min_cost_bipartite_perfect_matching.dir/build.make CMakeFiles/min_cost_bipartite_perfect_matching.dir/maximum_bipartite_matching.cpp.s
.PHONY : maximum_bipartite_matching.cpp.s

min_cost_max_flow.o: min_cost_max_flow.cpp.o

.PHONY : min_cost_max_flow.o

# target to build an object file
min_cost_max_flow.cpp.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/min_cost_max_flow.dir/build.make CMakeFiles/min_cost_max_flow.dir/min_cost_max_flow.cpp.o
.PHONY : min_cost_max_flow.cpp.o

min_cost_max_flow.i: min_cost_max_flow.cpp.i

.PHONY : min_cost_max_flow.i

# target to preprocess a source file
min_cost_max_flow.cpp.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/min_cost_max_flow.dir/build.make CMakeFiles/min_cost_max_flow.dir/min_cost_max_flow.cpp.i
.PHONY : min_cost_max_flow.cpp.i

min_cost_max_flow.s: min_cost_max_flow.cpp.s

.PHONY : min_cost_max_flow.s

# target to generate assembly for a file
min_cost_max_flow.cpp.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/min_cost_max_flow.dir/build.make CMakeFiles/min_cost_max_flow.dir/min_cost_max_flow.cpp.s
.PHONY : min_cost_max_flow.cpp.s

strongly_connected_components.o: strongly_connected_components.cpp.o

.PHONY : strongly_connected_components.o

# target to build an object file
strongly_connected_components.cpp.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/strongly_connected_components.dir/build.make CMakeFiles/strongly_connected_components.dir/strongly_connected_components.cpp.o
.PHONY : strongly_connected_components.cpp.o

strongly_connected_components.i: strongly_connected_components.cpp.i

.PHONY : strongly_connected_components.i

# target to preprocess a source file
strongly_connected_components.cpp.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/strongly_connected_components.dir/build.make CMakeFiles/strongly_connected_components.dir/strongly_connected_components.cpp.i
.PHONY : strongly_connected_components.cpp.i

strongly_connected_components.s: strongly_connected_components.cpp.s

.PHONY : strongly_connected_components.s

# target to generate assembly for a file
strongly_connected_components.cpp.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/strongly_connected_components.dir/build.make CMakeFiles/strongly_connected_components.dir/strongly_connected_components.cpp.s
.PHONY : strongly_connected_components.cpp.s

union_find.o: union_find.cpp.o

.PHONY : union_find.o

# target to build an object file
union_find.cpp.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/union_find.dir/build.make CMakeFiles/union_find.dir/union_find.cpp.o
.PHONY : union_find.cpp.o

union_find.i: union_find.cpp.i

.PHONY : union_find.i

# target to preprocess a source file
union_find.cpp.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/union_find.dir/build.make CMakeFiles/union_find.dir/union_find.cpp.i
.PHONY : union_find.cpp.i

union_find.s: union_find.cpp.s

.PHONY : union_find.s

# target to generate assembly for a file
union_find.cpp.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/union_find.dir/build.make CMakeFiles/union_find.dir/union_find.cpp.s
.PHONY : union_find.cpp.s

# Help Target
help:
	@echo "The following are some of the valid targets for this Makefile:"
	@echo "... all (the default if no target is provided)"
	@echo "... clean"
	@echo "... depend"
	@echo "... edit_cache"
	@echo "... rebuild_cache"
	@echo "... all_pairs_shortest_path"
	@echo "... belman_ford"
	@echo "... dijkstra"
	@echo "... is_bipartite_graph"
	@echo "... kruskal"
	@echo "... max_flow"
	@echo "... maximum_bipartite_matching"
	@echo "... min_cost_bipartite_perfect_matching"
	@echo "... min_cost_max_flow"
	@echo "... strongly_connected_components"
	@echo "... union_find"
	@echo "... all_pairs_shortest_path.o"
	@echo "... all_pairs_shortest_path.i"
	@echo "... all_pairs_shortest_path.s"
	@echo "... belman_ford.o"
	@echo "... belman_ford.i"
	@echo "... belman_ford.s"
	@echo "... dijkstra.o"
	@echo "... dijkstra.i"
	@echo "... dijkstra.s"
	@echo "... is_bipartite_graph.o"
	@echo "... is_bipartite_graph.i"
	@echo "... is_bipartite_graph.s"
	@echo "... kruskal.o"
	@echo "... kruskal.i"
	@echo "... kruskal.s"
	@echo "... max_flow.o"
	@echo "... max_flow.i"
	@echo "... max_flow.s"
	@echo "... maximum_bipartite_matching.o"
	@echo "... maximum_bipartite_matching.i"
	@echo "... maximum_bipartite_matching.s"
	@echo "... min_cost_max_flow.o"
	@echo "... min_cost_max_flow.i"
	@echo "... min_cost_max_flow.s"
	@echo "... strongly_connected_components.o"
	@echo "... strongly_connected_components.i"
	@echo "... strongly_connected_components.s"
	@echo "... union_find.o"
	@echo "... union_find.i"
	@echo "... union_find.s"
.PHONY : help



#=============================================================================
# Special targets to cleanup operation of make.

# Special rule to run CMake to check the build system integrity.
# No rule that depends on this can have commands that come from listfiles
# because they might be regenerated.
cmake_check_build_system:
	$(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0
.PHONY : cmake_check_build_system

